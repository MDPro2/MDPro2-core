name: Automated Test Build

on:
  push:
    branches: [ "master" ]
  pull_request:
    branches: [ "master" ]

jobs:
  build-windows:
    runs-on: windows-2022
    permissions:
      contents: write
      
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: Download lua
      id: lua
      uses: mercury233/action-cache-download-file@v1.0.0
      with:
        url: https://www.lua.org/ftp/lua-5.4.8.tar.gz

    - name: Lua
      run: |
        tar -xzf ${{ steps.lua.outputs.filepath }}
        move lua-5.4.8 lua

    - name: Download premake
      id: premake
      uses: mercury233/action-cache-download-file@v1.0.0
      with:
        url: https://github.com/premake/premake-core/releases/download/v5.0.0-beta7/premake-5.0.0-beta7-windows.zip

    - name: Premake
      run: |
        mkdir premake-5
        tar -C premake-5 -xzf ${{ steps.premake.outputs.filepath }}
        copy premake\lua.lua lua\premake5.lua
        copy premake\dll.lua dll.lua
        .\premake-5\premake5.exe vs2022 --file=dll.lua

    - name: Add msbuild to PATH
      uses: microsoft/setup-msbuild@v2

    - name: Build x32
      run: |
        msbuild build\ocgcoredll.sln /t:Build /p:"Configuration=Release;Platform=Win32"

    - name: Build x64
      run: |
        msbuild build\ocgcoredll.sln /t:Build /p:"Configuration=Release;Platform=x64"

    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: ocgcore-windows
        path: |
          build\bin\x32\Release\ocgcore.dll
          build\bin\x64\Release\ocgcore.dll

    - name: Delete old tag
      run: |
        git config --global user.name "GitHub Actions"
        git config --global user.email "actions@github.com"
        git fetch --tags
        git tag -d ocgcore || true
        git push origin :refs/tags/ocgcore || true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      id: create_release
      uses: actions/create-release@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ocgcore
        release_name: Release ocgcore
        draft: false
        prerelease: false
    
    - name: Upload Release Asset
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: build/bin/x64/Release/ocgcore.dll
        asset_name: ocgcore.dll
        asset_content_type: application/octet-stream
